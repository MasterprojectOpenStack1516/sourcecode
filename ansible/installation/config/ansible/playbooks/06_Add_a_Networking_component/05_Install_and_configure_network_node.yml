---
- name:  "Install and configure network node"
  hosts: network
  roles:
    - config
  sudo: True
  gather_facts: False
  tasks:
    # TODO: number tasks

    # To configure the Networking common components
    # WORKAROUND FOR BROKEN INI_FILE DEFAULT-SECTION HANDELING:
    - name: "WORKAROUND FOR BROKEN INI_FILE DEFAULT-SECTION HANDELING, RENAMING [DEFAULT] SECTION"
      replace: dest=/etc/neutron/neutron.conf
                regexp='\[DEFAULT\]'
                replace="[DEFAULT_WORKAROUND]"
                backup=no

    - name: "Configure the Networking server component - (a) In the [database] section, comment out any connection options because network nodes do not directly access the database"
      ini_file: dest=/etc/neutron/neutron.conf
                section=database
                option="connection"
                state=absent

    - name: "(b) Edit /etc/neutron/neutron.conf [DEFAULT] section"
      ini_file: dest=/etc/neutron/neutron.conf
                section=DEFAULT_WORKAROUND
                option={{ item.option }}
                value={{ item.value }}
                backup=no
      with_items:
      - { option: 'rpc_backend', value: 'rabbit' }
      - { option: 'auth_strategy', value: 'keystone' }
      - { option: 'core_plugin', value: 'ml2' }
      - { option: 'service_plugins', value: 'router' }
      - { option: 'allow_overlapping_ips', value: 'True' }
      - { option: 'verbose', value: 'True' }

    - name: "(c) Edit /etc/neutron/neutron.conf [oslo_messaging_rabbit] section"
      ini_file: dest=/etc/neutron/neutron.conf
                section=oslo_messaging_rabbit
                option={{ item.option }}
                value={{ item.value }}
                backup=no
      with_items:
      - { option: 'rabbit_host', value: '{{ config.controller_node_hostname }}' }
      - { option: 'rabbit_userid', value: 'openstack' }
      - { option: 'rabbit_password', value: '{{ config.rabbitmq_password }}' }

    - name: "(d) Comment out or remove any other options in the [keystone_authtoken] section."
      ini_file: dest=/etc/neutron/neutron.conf
                section=keystone_authtoken
                state=absent

    - name: "(e) Edit /etc/neutron/neutron.conf [keystone_authtoken] section"
      ini_file: dest=/etc/neutron/neutron.conf
                section=keystone_authtoken
                state=present
                option={{ item.option }}
                value={{ item.value }}
                backup=no
      with_items:
      - { option: 'auth_uri', value: 'http://{{ config.controller_node_hostname }}:5000' }
      - { option: 'auth_url', value: 'http://{{ config.controller_node_hostname }}:35357' }
      - { option: 'auth_plugin', value: 'password' }
      - { option: 'project_domain_id', value: 'default' }
      - { option: 'user_domain_id', value: 'default' }
      - { option: 'project_name', value: 'service' }
      - { option: 'username', value: 'neutron' }
      - { option: 'password', value: '{{ config.neutron_user_password }}' }

    # WORKAROUND FOR BROKEN INI_FILE DEFAULT-SECTION HANDELING:
    - name: "WORKAROUND FOR BROKEN INI_FILE DEFAULT-SECTION HANDELING, RENAMING [DEFAULT] SECTION"
      replace: dest=/etc/neutron/neutron.conf
                regexp='\[DEFAULT_WORKAROUND\]'
                replace="[DEFAULT]"
                backup=no

# To configure the Modular Layer 2 (ML2) plug-in
    - name: "Configure the Modular Layer 2 (ML2) plug-in - (f) Edit /etc/neutron/plugins/ml2/ml2_conf.ini [ml2] section"
      ini_file: dest=/etc/neutron/plugins/ml2/ml2_conf.ini
                section=ml2
                option={{ item.option }}
                value={{ item.value }}
                backup=no
      with_items:
      - { option: 'type_drivers', value: 'flat,vlan,gre,vxlan' }
      - { option: 'tenant_network_types', value: 'gre' }
      - { option: 'mechanism_drivers', value: 'openvswitch' }

    - name: "(g) Edit /etc/neutron/plugins/ml2/ml2_conf.ini [ml2_type_flat] section"
      ini_file: dest=/etc/neutron/plugins/ml2/ml2_conf.ini
                section=ml2_type_flat
                option={{ item.option }}
                value={{ item.value }}
                backup=no
      with_items:
      - { option: 'flat_networks', value: 'external' }

    - name: "(h) Edit /etc/neutron/plugins/ml2/ml2_conf.ini [ml2_type_gre] section"
      ini_file: dest=/etc/neutron/plugins/ml2/ml2_conf.ini
                section=ml2_type_gre
                option={{ item.option }}
                value={{ item.value }}
                backup=no
      with_items:
      - { option: 'tunnel_id_ranges', value: '1:1000' }

    - name: "(i) Edit /etc/neutron/plugins/ml2/ml2_conf.ini [securitygroup] section"
      ini_file: dest=/etc/neutron/plugins/ml2/ml2_conf.ini
                section=securitygroup
                option={{ item.option }}
                value={{ item.value }}
                backup=no
      with_items:
      - { option: 'enable_security_group', value: 'True' }
      - { option: 'enable_ipset', value: 'True' }
      - { option: 'firewall_driver', value: 'neutron.agent.linux.iptables_firewall.OVSHybridIptablesFirewallDriver' }

    - name: "(j) Edit /etc/neutron/plugins/ml2/ml2_conf.ini [ovs] section"
      ini_file: dest=/etc/neutron/plugins/ml2/ml2_conf.ini
                section=ovs
                option={{ item.option }}
                value={{ item.value }}
                backup=no
      with_items:
      - { option: 'local_ip ', value: '{{ config.ip_tunnel_prefix }}.{{ config.ip_network_suffix }}' }
      - { option: 'bridge_mappings', value: 'external:br-ex' }

    - name: "(k) Edit /etc/neutron/plugins/ml2/ml2_conf.ini [agent] section"
      ini_file: dest=/etc/neutron/plugins/ml2/ml2_conf.ini
                section=agent
                option={{ item.option }}
                value={{ item.value }}
                backup=no
      with_items:
      - { option: 'tunnel_types', value: 'gre' }

# To configure the Layer-3 (L3) agent
    - name: "Configure the Layer-3 (L3) agent - (m) Edit /etc/neutron/l3_agent.ini [DEFAULT] section"
      ini_file: dest=/etc/neutron/l3_agent.ini
                section=DEFAULT
                option={{ item.option }}
                value={{ item.value }}
                backup=no
      with_items:
      - { option: 'interface_driver', value: 'neutron.agent.linux.interface.OVSInterfaceDriver' }
      - { option: 'external_network_bridge', value: '' }
      - { option: 'router_delete_namespaces', value: 'True' }
      - { option: 'verbose', value: 'True' }

# To configure the DHCP agent
    - name: "Configure the DHCP agent - (n) Edit /etc/neutron/dhcp_agent.ini [DEFAULT] section"
      ini_file: dest=/etc/neutron/dhcp_agent.ini
                section=DEFAULT
                option={{ item.option }}
                value={{ item.value }}
                backup=no
      with_items:
      - { option: 'interface_driver', value: 'neutron.agent.linux.interface.OVSInterfaceDriver' }
      - { option: 'dhcp_driver', value: 'neutron.agent.linux.dhcp.Dnsmasq' }
      - { option: 'dhcp_delete_namespaces', value: 'True' }
      - { option: 'verbose', value: 'True' }
      - { option: 'dnsmasq_config_file', value: '/etc/neutron/dnsmasq-neutron.conf' }

    - name: "Create and edit the /etc/neutron/dnsmasq-neutron.conf file and Enable the DHCP MTU option (26) and configure it to 1454 bytes"
      lineinfile: dest=/etc/neutron/dnsmasq-neutron.conf
                  line="dhcp-option-force=26,1454"
                  state=present
                  create=yes

    - name: "Kill any existing dnsmasq processes"
      shell: "pkill dnsmasq || true" #Demo of pkill behaviour with Ansible: https://gist.github.com/willthames/ee40bd6d9b5eebb9b8eb

# To configure the metadata agent
    - name: "Configure the metadata agent - (n) Edit /etc/neutron/metadata_agent.ini [DEFAULT] section"
      ini_file: dest=/etc/neutron/metadata_agent.ini
                section=DEFAULT
                option={{ item.option }}
                value={{ item.value }}
                backup=no
      with_items:
      - { option: 'auth_uri', value: 'http://{{ config.controller_node_hostname }}:5000' }
      - { option: 'auth_url', value: 'http://{{ config.controller_node_hostname }}:35357' }
      - { option: 'auth_region', value: 'RegionOne' }
      - { option: 'auth_plugin', value: 'password' }
      - { option: 'project_domain_id', value: 'default' }
      - { option: 'user_domain_id', value: 'default' }
      - { option: 'project_name', value: 'service' }
      - { option: 'username', value: 'neutron' }
      - { option: 'password', value: '{{ config.neutron_user_password }}' }
      - { option: 'nova_metadata_ip', value: '{{ config.controller_node_hostname }}' }
      - { option: 'metadata_proxy_shared_secret', value: '{{ config.metadata_proxy_shared_secret }}' }
      - { option: 'verbose', value: 'True' }

# To configure the Open vSwitch (OVS) service
    - name: "Restart the OVS service"
      shell: "service openvswitch-switch restart"

    - name: "Add the external bridge"
      shell: "ovs-vsctl --may-exist add-br br-ex"

    - name: "Add a port to the external bridge that connects to the physical external network interface"
      shell: "ovs-vsctl --may-exist add-port br-ex {{ config.network_node_external_interface_name }}"

    - name: "Depending on your network interface driver, you may need to disable generic receive offload (GRO) to achieve suitable throughput between your instances and the external network. To temporarily disable GRO on the external network interface while testing your environment"
      shell: "echo OPTIONAL TODO"
