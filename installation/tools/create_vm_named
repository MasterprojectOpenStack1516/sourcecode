#!/bin/bash

# go to local directory so it is easier to target files
cd `dirname $0`

export vm_name=$1
export vm_config_folder=../config/vm/$vm_name

if ! ./vm_configuration_with_name_exists $vm_name $vm_config_folder
then
	exit 1
fi

source ../config/installation_configuration.sh

export configuration_directory=$configuration_directory

virsh destroy $vm_name 2> /dev/null
virsh undefine $vm_name --snapshots-metadata 2> /dev/null

# Create a new folder for the vm files.
# Every file generated should be in this folder.
export this_vm_files_folder=$vm_images_directory/$vm_name
rm -rf $this_vm_files_folder
mkdir $this_vm_files_folder

# copy the virtual machine image into the right folder
export vm_image_file=$this_vm_files_folder/${vm_name}.img
cp $vm_base_image_file $vm_image_file

# We create a new config file for every vm. 
# These are the files we use to store the vm config and images
export user_data_vm_config_file=$this_vm_files_folder/$user_data_cloud_config_file
export user_data_vm_config_image=$this_vm_files_folder/$user_data_cloud_config_image
export user_data_vm_config_image_qcow=$this_vm_files_folder/$user_data_cloud_config_image_qcow

# save all useful variables for template rendering
export authorized_public_key_for_access_to_the_vm=`cat $authorized_public_key_file_for_access_to_the_vm`
export variables_file=$this_vm_files_folder/variables
./config_variables \
	"vm_name=$vm_name" \
	"user_data_vm_config_image=$user_data_vm_config_image" \
	"user_data_vm_config_image_qcow=$user_data_vm_config_image_qcow" \
	"authorized_public_key_for_access_to_the_vm=$authorized_public_key_for_access_to_the_vm" \
	"vm_image_file=$vm_image_file" >> $variables_file

# if a configuration file for creation exists, we execute it
if [ -f "$vm_config_folder/creation.sh" ]
then
  $vm_config_folder/creation.sh || exit 5
fi

# Create a network configuration, we copy it into the vm.
cat $variables_file \
| 	./render_template $vm_config_folder/etc_network_interfaces > \
                          $this_vm_files_folder/etc_network_interfaces \
|| exit 2

# Add network configuration to variables
export network_interface_file_base64=`cat $this_vm_files_folder/etc_network_interfaces | base64 -w0`
echo network_interface_file_base64=$network_interface_file_base64 >> $variables_file

# Create a user data file
cat $variables_file \
|	./render_template $vm_config_folder/$user_data_cloud_config_file > $user_data_vm_config_file \
|| exit 3

# Build the user-data image
# Now we convert the $user_data_cloud_config_file file to an ISO file.
~/cloud-utils/bin/cloud-localds $user_data_vm_config_image $user_data_vm_config_file

# convert to qcow to support snapshotting
qemu-img convert -f raw -O qcow2 $user_data_vm_config_image $user_data_vm_config_image_qcow

# Render the template from creation.xml
cat $variables_file \
|	./render_template $vm_config_folder/creation.xml > $this_vm_files_folder/creation.xml \
|| exit 4


# from https://wiki.ubuntuusers.de/virsh
# create the virtual machine definition so it can be started
virsh define $this_vm_files_folder/creation.xml || exit 6

# error: Failed to define domain from /tmp/openstack_installation/images/network/creation.xml
# error: unknown OS type hvm





